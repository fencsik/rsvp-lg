<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.1.2">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '999', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="Default" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1792, 1120]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="RSVPLG" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="rsvp_stream">
      <CodeComponent name="rsvpController" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="tmpLetters = letters;&amp;#10;util.shuffle(tmpLetters);&amp;#10;t2lag = t2lags[util.randint(t2lags.length)];&amp;#10;stimLetters = tmpLetters;&amp;#10;stimLetters[((t1pos + t2lag) - 1)] = t2letter;&amp;#10;stimColors = ([&quot;black&quot;] * stimLetters.length);&amp;#10;stimColors[(t1pos - 1)] = &quot;white&quot;;&amp;#10;stim1.text = &quot;+&quot;;&amp;#10;stim1.color = &quot;black&quot;;&amp;#10;stim1.setAutoDraw(true);&amp;#10;stim2.setAutoDraw(false);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="#if rsvp_frame &lt; n_rsvp_frames&amp;#10;if rsvp_status == RSVP_STIM_START and core.getTime() &gt;= next_event_time:&amp;#10;    # at the start of each stim&amp;#10;    print('started frame %d at %f' % (rsvp_frame, win.lastFrameT))&amp;#10;    rsvp_status = RSVP_STIM_END&amp;#10;    next_event_time = win.lastFrameT + stim_duration&amp;#10;elif rsvp_status == RSVP_STIM_END and core.getTime() &gt;= next_event_time:&amp;#10;    # end of each stim&amp;#10;    for i in range(len(local_letter_stim)):&amp;#10;        local_letter_stim[i].setAutoDraw(False)&amp;#10;    rsvp_status = RSVP_ISI_START&amp;#10;    print('ended frame %d at %f' % (rsvp_frame, core.getTime()))&amp;#10;    # don't reset time so we switch to the next step on the next loop&amp;#10;elif rsvp_status == RSVP_ISI_START and core.getTime() &gt;= next_event_time:&amp;#10;    # start of each ISI, stim are invisible so set up for next stim&amp;#10;    print('starting ISI after frame %d at %f' % (rsvp_frame, core.getTime()))&amp;#10;    rsvp_frame += 1&amp;#10;    if rsvp_frame &lt; n_rsvp_frames:&amp;#10;        frame_global_letter = stream_global_letters[rsvp_frame]&amp;#10;        frame_local_letter = stream_local_letters[rsvp_frame]&amp;#10;        local_letter_pos = navon_letters[frame_global_letter].GetPositions()&amp;#10;        responses = navon_letters[frame_global_letter].GetResponses()&amp;#10;        for i in range(len(local_letter_pos)):&amp;#10;            local_letter_stim[i].setPos(local_letter_pos[i])&amp;#10;            local_letter_stim[i].setText(frame_local_letter)&amp;#10;            local_letter_stim[i].setColor(stream_colors[rsvp_frame])&amp;#10;        rsvp_status = RSVP_ISI_END&amp;#10;    else:&amp;#10;        rsvp_status = RSVP_DONE&amp;#10;    next_event_time = win.lastFrameT + isi_duration&amp;#10;elif rsvp_status == RSVP_ISI_END and core.getTime() &gt;= next_event_time:&amp;#10;    # at the end of each ISI&amp;#10;    print('ending ISI beforeframe %d at %f' % (rsvp_frame, core.getTime()))&amp;#10;    for i in range(len(local_letter_pos)):&amp;#10;        local_letter_stim[i].setAutoDraw(True)&amp;#10;    rsvp_status = RSVP_STIM_START&amp;#10;    # don't reset time so we switch to the next step on the next loop&amp;#10;elif rsvp_status == RSVP_DONE and core.getTime() &gt;= next_event_time:&amp;#10;    print('Finishing at %f after %d stimuli' % (core.getTime(), rsvp_frame))&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="rsvpController" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="stim1" plugin="None">
        <Param val="" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val=".1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="stim1" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="start_experiment">
      <CodeComponent name="experiment_setup" plugin="None">
        <Param val="from math import floor&amp;#10;&amp;#10;# define stimuli and stream characteristics&amp;#10;letters = ['E', 'F', 'H', 'L', 'N', 'S', 'T',&amp;#10;           'U', 'Y', 'Z']&amp;#10;t2letter = 'X'&amp;#10;t1pos_list = [3, 4, 5] # specified in frames not array index&amp;#10;t2lag_list = [2, 3, 4] # lag of 1 would be right after T1&amp;#10;global_local_list = ['global', 'local']&amp;#10;&amp;#10;# constants for managing RSVP stream&amp;#10;RSVP_STIM_START = 0&amp;#10;RSVP_STIM_END = 1&amp;#10;RSVP_ISI_START = 2&amp;#10;RSVP_ISI_END = 3&amp;#10;RSVP_DONE = 4&amp;#10;&amp;#10;# random number generator&amp;#10;rng = np.random.default_rng()" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="letters = [&quot;E&quot;, &quot;F&quot;, &quot;H&quot;, &quot;L&quot;, &quot;N&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;Y&quot;, &quot;Z&quot;];&amp;#10;t2letter = &quot;X&quot;;&amp;#10;t1pos = 3;&amp;#10;t2lags = [2, 3, 4];&amp;#10;RSVP_PRE_STREAM = 0;&amp;#10;RSVP_STIM = 1;&amp;#10;RSVP_ISI = 2;&amp;#10;RSVP_DONE = 3;&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="experiment_setup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="stim_setup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# timing&amp;#10;stim_duration = 10 * 1/60&amp;#10;isi_duration = 10 * 1/60&amp;#10;&amp;#10;# set up Navon letters&amp;#10;localHeight = .02&amp;#10;localWidth = .015&amp;#10;globalHeight = .25 # originally .2&amp;#10;globalWidth = .2 # originally .15&amp;#10;nY = 9&amp;#10;localHeight = globalHeight/nY&amp;#10;&amp;#10;class NavonLetter:&amp;#10;    def __init__(self, letter, responses, positions):&amp;#10;        self.name = letter&amp;#10;        self.responses = responses&amp;#10;        self.pos = positions&amp;#10;&amp;#10;    def GetName(self):&amp;#10;        return self.name&amp;#10;&amp;#10;    def GetResponses(self):&amp;#10;        return self.responses&amp;#10;&amp;#10;    def GetPositions(self):&amp;#10;        return self.pos&amp;#10;&amp;#10;    def PositionLength(self):&amp;#10;        return len(self.pos)&amp;#10;&amp;#10;navon_letters = dict()&amp;#10;&amp;#10;name = 'A'&amp;#10;responses = ['a','A']&amp;#10;positions = []&amp;#10;for Idx in range(0,nY):&amp;#10;    positions.append([(1+Idx-nY)/2/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(0,nY-1):&amp;#10;    positions.append([-(1+Idx-nY)/2/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(int(nY/3),nY-int(nY/3)):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-3)*globalWidth,-globalHeight/6])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'C'&amp;#10;responses = ['c','C']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([-sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,int(nY/3)):&amp;#10;    positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(int(2*nY/3),nY-1):&amp;#10;    positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;Idx = .25&amp;#10;positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;positions.append([-sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,-(1+Idx-nY/2)/nY*globalHeight])&amp;#10;positions.append([-sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,-(1+Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'D'&amp;#10;responses = ['d','D']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([-globalWidth/2,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,floor(nY/2)):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,globalHeight/2-localHeight])&amp;#10;for Idx in range(1,floor(nY/2)):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,-globalHeight/2])&amp;#10;for Idx in range(0,nY):&amp;#10;    positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;Idx = .25&amp;#10;positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,-(1+Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'E'&amp;#10;responses = ['e','E']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([-globalWidth/2,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,nY):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,globalHeight/2-localHeight])&amp;#10;for Idx in range(1,nY-1):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,-localHeight/2])&amp;#10;for Idx in range(1,nY):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,-globalHeight/2])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'F'&amp;#10;responses = ['f','F']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([-globalWidth/2,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,nY):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,globalHeight/2-localHeight])&amp;#10;for Idx in range(1,nY-2):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,-localHeight/2])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'H'&amp;#10;responses = ['h','H']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([-globalWidth/2,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,nY-1):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,-localHeight/2])&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([globalWidth/2,(Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'L'&amp;#10;responses = ['l','L']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([-globalWidth/2,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,nY):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,-globalHeight/2])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'M'&amp;#10;responses = ['m','M']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([-globalWidth/2-globalWidth/2/nY,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(0,nY-1):&amp;#10;    positions.append([Idx/2/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,nY-1):&amp;#10;    positions.append([-Idx/2/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([globalWidth/2+globalWidth/2/nY,(Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'N'&amp;#10;responses = ['n','N']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([-globalWidth/2,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,nY-1):&amp;#10;    positions.append([-(.5+Idx-nY/2)/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([globalWidth/2,(Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'O'&amp;#10;responses = ['o','O']&amp;#10;positions = []&amp;#10;for Idx in range(0,nY):&amp;#10;    positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(nY-1):&amp;#10;    positions.append([-sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;Idx = .25&amp;#10;positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;positions.append([-sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;positions.append([sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,-(1+Idx-nY/2)/nY*globalHeight])&amp;#10;positions.append([-sqrt(.25-((.5+Idx-nY/2)/(nY-1))**2)*globalWidth,-(1+Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'T'&amp;#10;responses = ['t','T']&amp;#10;positions = []&amp;#10;for Idx in range(nY):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,globalHeight/2-localHeight])&amp;#10;for Idx in range(nY-1):&amp;#10;    positions.append([0,(Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'V'&amp;#10;responses = ['v','V']&amp;#10;positions = []&amp;#10;for Idx in range(0,nY):&amp;#10;    positions.append([Idx/2/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(1,nY):&amp;#10;    positions.append([-Idx/2/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;name = 'X'&amp;#10;responses = ['x','X']&amp;#10;positions = []&amp;#10;for Idx in range(0,nY):&amp;#10;    positions.append([-(.5+Idx-nY/2)/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;for Idx in range(0,nY):&amp;#10;    positions.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;navon_letters[name] = NavonLetter(name, responses, positions)&amp;#10;&amp;#10;&amp;#10;longestN = 0&amp;#10;longestLetter = ''&amp;#10;allowed_response_list = []&amp;#10;for k in iter(navon_letters):&amp;#10;    n = navon_letters[k].PositionLength()&amp;#10;    if n &gt; longestN:&amp;#10;        longestN = n&amp;#10;        longestLetter = k&amp;#10;    allowed_response_list.extend(navon_letters[k].GetResponses())&amp;#10;print('longest letter is \&quot;%s\&quot; with %d positions' % (longestLetter, longestN))&amp;#10;print(allowed_response_list)&amp;#10;&amp;#10;letters = ''.join(list(navon_letters))&amp;#10;print(letters)&amp;#10;&amp;#10;local_letter_stim = list()&amp;#10;for i in range(longestN):&amp;#10;    local_letter_stim.append(visual.TextBox2(&amp;#10;        win=win, name='local%02d' % i,&amp;#10;        text='+', pos=[0, 0],&amp;#10;        font='Arial', letterHeight=localHeight,&amp;#10;        alignment='center', bold=True,&amp;#10;        color='red', opacity=1,&amp;#10;        autoDraw=False))&amp;#10;&amp;#10;# letterX = ['x','X']&amp;#10;# for Idx in range(0,nY):&amp;#10;#     letterX.append([-(.5+Idx-nY/2)/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;# for Idx in range(0,nY):&amp;#10;#     letterX.append([(.5+Idx-nY/2)/(nY-1)*globalWidth,(Idx-nY/2)/nY*globalHeight])&amp;#10;&amp;#10;# elementX = visual.TextStim(&amp;#10;#     win=win, name='elementX',&amp;#10;#     text='Q', font='Arial',&amp;#10;#     pos=&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="stim_setup" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="start_trial">
      <CodeComponent name="trial_setup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;        // add-on: list(s: string): string[]&amp;#10;        function list(s) {&amp;#10;            // if s is a string, we return a list of its characters&amp;#10;            if (typeof s === 'string')&amp;#10;                return s.split('');&amp;#10;            else&amp;#10;                // otherwise we return s:&amp;#10;                return s;&amp;#10;        }&amp;#10;&amp;#10;        n_rsvp_frames = 9;&amp;#10;t1pos = rng.choice(t1pos_list);&amp;#10;t2lag = rng.choice(t2lag_list);&amp;#10;stream_global_letters = list(navon_letters);&amp;#10;stream_local_letters = stream_global_letters.copy();&amp;#10;util.shuffle(stream_global_letters);&amp;#10;util.shuffle(stream_local_letters);&amp;#10;stream_global_letters = stream_global_letters.slice(0, n_rsvp_frames);&amp;#10;stream_local_letters = stream_local_letters.slice(0, n_rsvp_frames);&amp;#10;console.log(stream_global_letters);&amp;#10;console.log(stream_local_letters);&amp;#10;stream_colors = ([&quot;black&quot;] * n_rsvp_frames);&amp;#10;stream_colors[t1pos] = &quot;white&quot;;&amp;#10;t1_status = rng.choice(local_global_list);&amp;#10;rsvp_frame = (- 1);&amp;#10;rsvp_status = RSVP_ISI_START;&amp;#10;next_event_time = core.getTime();&amp;#10;console.log(`started at ${core.getTime()}`);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# trial setup code&amp;#10;n_rsvp_frames = 9&amp;#10;t1pos = rng.choice(t1pos_list)&amp;#10;t2lag = rng.choice(t2lag_list)&amp;#10;stream_global_letters = list(navon_letters)&amp;#10;stream_local_letters = stream_global_letters.copy()&amp;#10;shuffle(stream_global_letters)&amp;#10;shuffle(stream_local_letters)&amp;#10;stream_global_letters = stream_global_letters[0:n_rsvp_frames]&amp;#10;stream_local_letters = stream_local_letters[0:n_rsvp_frames]&amp;#10;print(stream_global_letters)&amp;#10;print(stream_local_letters)&amp;#10;stream_colors = ['black'] * n_rsvp_frames&amp;#10;stream_colors[t1pos - 1] = 'white'&amp;#10;t1_status = rng.choice(global_local_list)&amp;#10;if t1_status == 'local':&amp;#10;    print('T1 local')&amp;#10;    t1_status_plural = 's'&amp;#10;    t1_status_verb = 'were'&amp;#10;    correct_t1_response = navon_letters[stream_local_letters[t1pos-1]].GetResponses()&amp;#10;else:&amp;#10;    print ('T1 global')&amp;#10;    t1_status_plural = ''&amp;#10;    t1_status_verb = 'was'&amp;#10;    correct_t1_response = navon_letters[stream_global_letters[t1pos-1]].GetResponses()&amp;#10;trials.addData('globalLetters', ''.join(stream_global_letters))&amp;#10;trials.addData('localLetters', ''.join(stream_local_letters))&amp;#10;trials.addData('t1global', stream_global_letters[t1pos-1])&amp;#10;trials.addData('t1local', stream_local_letters[t1pos-1])&amp;#10;trials.addData('t1pos', t1pos)&amp;#10;trials.addData('t1status', t1_status)&amp;#10;&amp;#10;rsvp_frame = -1&amp;#10;rsvp_status = RSVP_ISI_START&amp;#10;next_event_time = core.getTime() # start ISI now&amp;#10;print('started at %f' % (core.getTime()))&amp;#10;print(correct_t1_response)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="trial_setup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="trial_cue" plugin="None">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.025" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.5" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="trial_cue" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="visible" valType="str" updates="constant" name="overflow"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="Type here..." valType="str" updates="constant" name="placeholder"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="list" updates="constant" name="speechPoint"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'Report the ' + t1_status + ' letter' + t1_status_plural + '\nof the white stimulus\n\nPress any key to begin trial'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <KeyboardComponent name="trial_cue_response" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="trial_cue_response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trial_fixation">
      <TextComponent name="fixation" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="t1_response">
      <TextboxComponent name="t1_response_prompt" plugin="None">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.025" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="t1_response_prompt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="visible" valType="str" updates="constant" name="overflow"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="Type here..." valType="str" updates="constant" name="placeholder"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="list" updates="constant" name="speechPoint"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'What ' + t1_status_verb + ' the ' + t1_status + ' letter' + t1_status_plural + ' in the white stimulus?\n\nType your answer\n(don\'t worry about upper or lower case)'" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <KeyboardComponent name="t1_response_entry" plugin="None">
        <Param val="allowed_response_list" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="t1_response_entry" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="process_t1_response" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if len(t1_response_entry.keys) != 1:&amp;#10;    # no response or multiple responses&amp;#10;    correct = -1&amp;#10;    feedback_text = 'BAD RESPONSE'&amp;#10;    feedback_color = 'yellow'&amp;#10;elif t1_response_entry.keys in correct_t1_response:&amp;#10;    # response is in list of possible correct responses&amp;#10;    correct = 1&amp;#10;    feedback_text = 'CORRECT'&amp;#10;    feedback_color = 'green'&amp;#10;else:&amp;#10;    # incorrect response&amp;#10;    correct = 0&amp;#10;    feedback_text = 'ERROR'&amp;#10;    feedback_color = 'red'&amp;#10;&amp;#10;trials.addData('t1acc', correct)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="process_t1_response" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="t1_feedback">
      <TextboxComponent name="feedback" plugin="None">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="$feedback_color" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="feedback" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="visible" valType="str" updates="constant" name="overflow"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="Type here..." valType="str" updates="constant" name="placeholder"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="list" updates="constant" name="speechPoint"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$feedback_text" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </TextboxComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="start_experiment"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="start_trial"/>
    <Routine name="trial_fixation"/>
    <Routine name="rsvp_stream"/>
    <Routine name="t1_response"/>
    <Routine name="t1_feedback"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
